

class ListHeader(Frame):
	def __init__(self, parent: JobsPanel):
		super().__init__(parent)

		# ListHeader configuration:
		self.config(bg=DARK_GREY1)
		self.grid(row=0, column=0, sticky="ew", padx=1, pady=1)
		self.columnconfigure(index=0, weight=4)
		self.columnconfigure(index=(1, 2, 3), weight=1)

		# Create the labels for each of our job's details.
		Label(self, text="Name:", anchor="w", bg=DARK_GREY1, fg=WHITE1, width=1).grid(row=0, column=0, sticky="nsew")
		Label(self, text="Arrival:", anchor="w", bg=DARK_GREY1, fg=WHITE1, width=1).grid(row=0, column=1, sticky="nsew")
		Label(self, text="Burst:", anchor="w", bg=DARK_GREY1, fg=WHITE1, width=1).grid(row=0, column=2, sticky="nsew")
		Label(self, text="Priority:", anchor="w", bg=DARK_GREY1, fg=WHITE1, width=1).grid(row=0, column=3, sticky="nsew")


class ListBody(Canvas):
	"""

	"""
	def __init__(self, parent: JobsPanel) -> None:
		super().__init__(parent)
		self.items: dict[Job, ListItem] = {}

		# List configuration:
		self.config(bg=DARK_GREY2)
		self.grid(row=1, column=0, sticky="nsew")
		self.columnconfigure(index=0, weight=1)

	def add_item(self, job: Job) -> None:
		if len(self.items) >= MAX_JOBS:
			raise Exception("The maximum number of jobs has been reached.")

		item = ListItem(self, job.name, job.arrival, job.burst, job.priority)
		self.items[job] = item

	def remove_item(self, job: Job) -> None:
		self.items[job].destroy()
		del self.items[job]


class ListItem(Frame):
	"""

	"""
	def __init__(self, parent: ListBody, name: str | float, arrival: str | float, burst: str | float, priority: str | float) -> None:
		super().__init__(parent)

		# ListItem configuration:
		self.config(bg=DARK_GREY1)
		self.grid(row=len(parent.items), column=0, sticky="ew", padx=1, pady=1)

		self.columnconfigure(index=0, weight=4)
		self.columnconfigure(index=(1, 2, 3), weight=1)

		# Create the labels for each of our job's details.
		Label(self, text=name, anchor="w", bg=DARK_GREY2, fg=WHITE1, width=1).grid(row=0, column=0, sticky="nsew", pady=(0, 1))
		Label(self, text=arrival, anchor="w", bg=DARK_GREY2, fg=WHITE1, width=1).grid(row=0, column=1, sticky="nsew", pady=(0, 1))
		Label(self, text=burst, anchor="w", bg=DARK_GREY2, fg=WHITE1, width=1).grid(row=0, column=2, sticky="nsew", pady=(0, 1))
		Label(self, text=priority, anchor="w", bg=DARK_GREY2, fg=WHITE1, width=1).grid(row=0, column=3, sticky="nsew", pady=(0, 1))


class InputPanel(Frame):
	"""

	"""
	def __init__(self, parent: App):
		super().__init__(parent)

		# InputPanel configuration:
		self.config(bg=DARK_GREY2)
		self.grid(row=1, column=0, rowspan=2, sticky="nsew", padx=1, pady=1)

		self.columnconfigure(index=0, weight=1)
		self.columnconfigure(index=1, weight=2)


class InputLabel(Frame):
	def __init__(self, parent: InputPanel, text: str, interface):
		super().__init__(parent)
		self.choice: StringVar = StringVar(self, value="FCFS")

		# Set up the label for our input.
		self.label = Label(self, text="Choose algorithm:", anchor="w", width=1)
		self.label.config(bg=DARK_GREY1, fg=WHITE1)
		self.label.grid(row=0, column=0, sticky="nsew", padx=1, pady=1)

	def on_input(self, _):
		print(self.choice.get())


class AlgorithmChoiceMenu(OptionMenu):
	def __init__(self, parent: InputLabel):
		super().__init__(parent, parent.choice, "FCFS", "SJF", "RR", command=parent.on_input)
		self.config(bg=DARK_GREY1, fg=WHITE1, highlightthickness=0, activebackground=DARK_GREY1, activeforeground=WHITE1, border=0, width=1)
		self.grid(row=0, column=1, sticky="nsew", padx=1, pady=1)
